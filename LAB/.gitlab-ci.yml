# image de base 
image: node:latest

# config cache npm 
cache:
  key:
    files:
      - package-lock.json
  paths:
    - node_modules/
    - .npm/

# etapes de la pipelin
stages:
  - validate
  - test
  - build
  - release
  - deploy


# instal des dependances avec cache npm
install:
  stage: .pre
  script:
    - npm ci --cache .npm --prefer-offline

# check du code avec linter
lint:
  stage: validate
  script:
    - npm run lint
  rules:
    - if: '$CI_COMMIT_TAG == null && $CI_COMMIT_TITLE !~ /^chore: release/'

# job pour environnement canary uniquement
only-canary:
  stage: validate
  script:
    - echo "Hello Only Canary !"
  rules:
    - if: '$ENV_TARGET == "canary"'

# execution des tests unitaires
unit-test:
  stage: test
  <<: - echo "Running test script!"
  rules:
    - if: '$CI_COMMIT_TAG == null && $CI_COMMIT_TITLE !~ /^chore: release/'

# tests integ qui depend des TU
integration-test:
  stage: test
  <<: - echo "Running test script!"
  script:
    - echo "Hello Integration !"
  needs:
    - unit-test
  rules:
    - if: '$CI_COMMIT_TAG == null && $CI_COMMIT_TITLE !~ /^chore: release/'

# tests End-to-End
e2e-test:
  stage: test
  script:
    - echo "Hello E2E!"
  needs:
    - integration-test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'  # declencher par merge request

# declenchement manuel pour publier en release
release:
  stage: release
  when: manual
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"
        && $CI_COMMIT_TAG == null
        && $CI_COMMIT_TITLE !~ /^chore: release/'
  before_script:
    - git config user.email $GITLAB_USER_EMAIL  # config user Git
    - git config user.name $GITLAB_USER_NAME
    - git remote set-url origin
      "https://gitlab-ci-token:$GITLAB_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
    - git checkout $CI_COMMIT_BRANCH
    - git pull origin $CI_COMMIT_BRANCH --rebase  # maj branche
  script:
    - npx --yes release-it --ci  # outil release-it pour publier
