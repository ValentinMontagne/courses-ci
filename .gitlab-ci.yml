# .gitlab-ci.yml file

image: node:latest

cache:
  key:
    files:
      - package-lock.json
  paths:
    - node_modules/
    - .npm/

stages:
  - install
  - validate
  - test
  - build
  - release
  - deploy

# Définir une configuration commune pour les tests (Anchor)
.test-template: &test-template
  stage: test
  rules:
    - if: '$CI_COMMIT_TAG == null && $CI_COMMIT_TITLE !~ /^chore: release/'

install:
  stage: install
  script:
    - npm ci --cache .npm --prefer-offline

lint:
  stage: validate
  rules:
    - if: '$CI_COMMIT_TAG == null && $CI_COMMIT_TITLE !~ /^chore: release/'
  script:
    - npm run lint

unit-test:
  <<: *test-template  # Hérite de la configuration de l'Anchor test-template
  script:
    - npm test

integration-test:
  <<: *test-template  # Hérite de la configuration de l'Anchor test-template
  needs: ["unit-test"]  # Ne s'exécute que si unit-test réussit
  script:
    - echo "Hello Integration!"

e2e-test:
  <<: *test-template  # Hérite de la configuration de l'Anchor test-template
  needs: ["integration-test"]  # Ne s'exécute que si integration-test réussit
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - echo "Hello E2E!"

release:
  stage: release
  when: manual
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG == null && $CI_COMMIT_TITLE !~ /^chore: release/'
  before_script:
    - git config user.email "$GITLAB_USER_EMAIL"
    - git config user.name "$GITLAB_USER_NAME"
    - git remote set-url origin "https://gitlab-ci-token:$GITLAB_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
    - git checkout "$CI_COMMIT_BRANCH"
    - git pull origin "$CI_COMMIT_BRANCH" --rebase
  script:
    - npx --yes release-it --ci


