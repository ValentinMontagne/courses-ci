name: workflow.yml

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

  lint:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run lint
        run: npm run lint

  unit-test:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Run unit tests
        run: npm test

  e2e-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [install, unit-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run e2e tests
        run: npm run e2e

  build:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache dist directory
        uses: actions/cache@v3
        with:
          path: dist/
          key: ${{ runner.os }}-dist-${{ hashFiles('package-lock.json', 'src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-dist-


  docker-build:
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Cache Docker layers
          uses: actions/cache@v3
          with:
            path: /tmp/.buildx-cache
            key: docker-${{ github.sha }}

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1
          with:
            cache-from: type=local,src=/tmp/.buildx-cache
            cache-to: type=local,dest=/tmp/.buildx-cache

        - name: Build Docker image
          run: docker build . -t my-app-image:latest

        - name: Convert repo name to lowercase
          id: repo_name
          run: |
            REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            echo "Repository name in lowercase: $REPO_NAME"
            echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

        - name: Log in to GitHub Container Registry
          env:
            GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          run: |
            echo "$GHCR_TOKEN" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

        - name: Tag Docker image
          run: docker tag my-app-image:latest ghcr.io/${{ env.REPO_NAME }}/my-app-image:latest

        - name: Push Docker image to GitHub Container Registry
          run: docker push ghcr.io/${{ env.REPO_NAME }}/my-app-image:latest



  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache npm global for release
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: release-npm-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config user.name "${{ secrets.GIT_USER_NAME }}"

      - name: Release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npx release-it
