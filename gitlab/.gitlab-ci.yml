# Fichier .gitlab-ci.yml

# Utilisation de l'image Docker officielle de Node.js pour exécuter les jobs
image: node:latest

# Configuration du cache pour éviter de re-télécharger les dépendances à chaque exécution
cache:
  key:
    files:
      - package-lock.json
  paths:
    - node_modules/
    - .npm/

# Définition des différents stages de la pipeline
stages:
  - validate
  - test
  - build
  - release
  - deploy

# Anchor pour les règles communes (évite la duplication)
# Cette règle vérifie que le commit n'a pas de tag et que le titre ne contient pas "chore: release"
.default-rules: &default-rules
  if: '$CI_COMMIT_TAG == null && $CI_COMMIT_TITLE !~ /^chore: release/'

# Anchor pour les scripts communs (évite la duplication)
# Ce script affiche un message indiquant que les tests sont en cours d'exécution
.default-scripts: &default-scripts
  script:
    - echo "Running test script!"

# Job d'installation des dépendances (stade préparatoire avant les autres jobs)
install:
  stage: .pre
  script:
    # Utilise le cache pour npm et installe les dépendances en mode hors ligne si possible
    - npm ci --cache .npm --prefer-offline

# Job de vérification du code avec linter (valide la qualité du code)
lint:
  stage: validate
  script:
    - npm run lint
  rules:
    - *default-rules  # Utilisation de l'anchor pour les règles

# Job qui ne s'exécute que pour l'environnement "canary"
only-canary:
  stage: validate
  script:
    - echo "Hello Only Canary !"
  rules:
    - if: '$ENV_TARGET == "canary"'  # Ne s'exécute que si la variable d'environnement est "canary"

# Job pour les tests unitaires
unit-test:
  stage: test
  <<: *default-scripts  # Réutilisation du script commun
  rules:
    - *default-rules  # Utilisation de l'anchor pour les règles

# Job pour les tests d'intégration, qui dépend des tests unitaires
integration-test:
  stage: test
  <<: *default-scripts  # Réutilisation du script commun
  script:
    - echo "Hello Integration !"  # Ajout d'un script spécifique pour ce job
  needs:
    - unit-test  # Ce job dépend de la réussite des tests unitaires
  rules:
    - *default-rules  # Utilisation de l'anchor pour les règles

# Job pour les tests End-to-End, qui dépend des tests d'intégration
e2e-test:
  stage: test
  script:
    - echo "Hello E2E!"  # Script spécifique pour les tests E2E
  needs:
    - integration-test  # Ce job dépend de la réussite des tests d'intégration
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'  # Ne s'exécute que lors d'un merge request

# Job de release (libération) qui doit être exécuté manuellement
release:
  stage: release
  when: manual  # Ce job doit être déclenché manuellement
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"
        && $CI_COMMIT_TAG == null
        && $CI_COMMIT_TITLE !~ /^chore: release/'
  before_script:
    # Configuration des informations utilisateur pour Git avant la release
    - git config user.email $GITLAB_USER_EMAIL
    - git config user.name $GITLAB_USER_NAME
    # Configuration de l'URL distante pour pousser la release
    - git remote set-url origin
      "https://gitlab-ci-token:$GITLAB_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
    - git checkout $CI_COMMIT_BRANCH
    - git pull origin $CI_COMMIT_BRANCH --rebase  # Met à jour la branche avant la release
  script:
    - npx --yes release-it --ci  # Utilisation de l'outil release-it pour gérer la publication
